diff --git a/node_modules/@types/oojs-ui/CopyTextLayout.d.ts b/node_modules/@types/oojs-ui/CopyTextLayout.d.ts
new file mode 100644
index 0000000..d31006c
--- /dev/null
+++ b/node_modules/@types/oojs-ui/CopyTextLayout.d.ts
@@ -0,0 +1,147 @@
+declare namespace OO.ui {
+	/**
+	 * CopyTextLayout is an action field layout containing some readonly text
+	 * and a button to copy it to the clipboard.
+	 *
+	 * ResourceLoader module: `oojs-ui-widgets`
+	 *
+	 * @see https://doc.wikimedia.org/oojs-ui/master/js/#!/api/OO.ui.CopyTextLayout
+	 */
+	interface CopyTextLayout<
+		T extends TextInputWidget | MultilineTextInputWidget =
+			| TextInputWidget
+			| MultilineTextInputWidget
+	> extends CopyTextLayout.Props, CopyTextLayout.Prototype<T>
+	{}
+
+	namespace CopyTextLayout {
+		interface EventMap extends mixin.LabelElement.EventMap {
+			/**
+			 * When the user has executed a copy command.
+			 *
+			 * @param success Whether the copy command succeeded
+			 */
+			copy: [success: boolean];
+		}
+
+		interface ConfigOptions<M extends boolean | undefined> extends ActionFieldLayout.ConfigOptions {
+			/** Text to copy, can also be provided as `textInput.value` */
+			copyText?: string;
+			/** Config for the text input widget */
+			textInput?: M extends true
+				? MultilineTextInputWidget.ConfigOptions
+				: TextInputWidget.ConfigOptions;
+			/** Config for the button widget */
+			button?: ButtonWidget.ConfigOptions;
+			/** Whether to use a multiline text input */
+			multiline?: M;
+		}
+
+		type Static = ActionFieldLayout.Static;
+
+		interface Props extends ActionFieldLayout.Props {
+			/** Text input widget used in the layout */
+			textInput: TextInputWidget | MultilineTextInputWidget;
+			/** Button widget used in the layout */
+			button: ButtonWidget;
+		}
+
+		interface Prototype<
+			T extends TextInputWidget | MultilineTextInputWidget =
+				| TextInputWidget
+				| MultilineTextInputWidget
+		> extends FieldLayout.Prototype<T> {
+			/**
+			 * Handle button click events.
+			 *
+			 * @fires copy
+			 */
+			onButtonClick(): void;
+
+			/**
+			 * Handle text widget focus events.
+			 */
+			onInputFocus(): void;
+
+			/**
+			 * Select the text to copy.
+			 */
+			selectText(): void;
+
+			/**
+			 * Get the widget contained by the field.
+			 *
+			 * @return Field widget
+			 */
+			getField(): T;
+
+			// #region EventEmitter overloads
+			on<K extends keyof EventMap, A extends ArgTuple = [], C = null>(
+				event: K,
+				method: EventHandler<C, (this: C, ...args: [...A, ...EventMap[K]]) => void>,
+				args?: A,
+				context?: C
+			): this;
+			on<K extends string, C = null>(
+				event: K extends keyof EventMap ? never : K,
+				method: EventHandler<C>,
+				args?: any[],
+				context?: C
+			): this;
+
+			once<K extends keyof EventMap>(
+				event: K,
+				listener: (this: null, ...args: EventMap[K]) => void
+			): this;
+			once<K extends string>(
+				event: K extends keyof EventMap ? never : K,
+				listener: (this: null, ...args: any[]) => void
+			): this;
+
+			off<K extends keyof EventMap, C = null>(
+				event: K,
+				method?: EventHandler<C, (this: C, ...args: EventMap[K]) => void>,
+				context?: C
+			): this;
+			off<K extends string, C = null>(
+				event: K extends keyof EventMap ? never : K,
+				method?: EventHandler<C>,
+				context?: C
+			): this;
+
+			emit<K extends keyof EventMap>(event: K, ...args: EventMap[K]): boolean;
+			emit<K extends string>(event: K extends keyof EventMap ? never : K, ...args: any[]): boolean;
+
+			emitThrow<K extends keyof EventMap>(event: K, ...args: EventMap[K]): boolean;
+			emitThrow<K extends string>(
+				event: K extends keyof EventMap ? never : K,
+				...args: any[]
+			): boolean;
+
+			connect<T extends Partial<Record<keyof EventMap, any>>, C>( // eslint-disable-line @definitelytyped/no-unnecessary-generics
+				context: C,
+				methods: EventConnectionMap<T, C, EventMap>
+			): this;
+
+			disconnect<T extends Partial<Record<keyof EventMap, any>>, C>( // eslint-disable-line @definitelytyped/no-unnecessary-generics
+				context: C,
+				methods?: EventConnectionMap<T, C, EventMap>
+			): this;
+			// #endregion
+		}
+
+		interface Constructor {
+			/** @param config Configuration options */
+			new<M extends boolean | undefined = undefined>(config: ConfigOptions<M>): CopyTextLayout<
+				M extends true ? MultilineTextInputWidget : TextInputWidget
+			>;
+			prototype: Prototype;
+			static: Static;
+			super: ActionFieldLayout.Constructor;
+			/** @deprecated Use `super` instead */
+			parent: ActionFieldLayout.Constructor;
+		}
+	}
+
+	const CopyTextLayout: CopyTextLayout.Constructor;
+}
diff --git a/node_modules/@types/oojs-ui/MessageDialog.d.ts b/node_modules/@types/oojs-ui/MessageDialog.d.ts
index 8edb265..071162a 100644
--- a/node_modules/@types/oojs-ui/MessageDialog.d.ts
+++ b/node_modules/@types/oojs-ui/MessageDialog.d.ts
@@ -58,7 +58,7 @@ declare namespace OO.ui {
             message: JQuery | Deferrable<string> | null;
         }
 
-        type Props = Dialog.Props;
+        interface Props extends Dialog.Props {}
 
         interface Prototype extends Dialog.Prototype {
             getSetupProcess(data?: SetupDataMap & Record<string, any>): Process;
diff --git a/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts b/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
index b9e1230..9ad53f6 100644
--- a/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
+++ b/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
@@ -22,6 +22,11 @@ declare namespace OO.ui {
     interface MultilineTextInputWidget extends MultilineTextInputWidget.Props, MultilineTextInputWidget.Prototype {}
 
     namespace MultilineTextInputWidget {
+        interface NonNullRange {
+            from: number;
+            to: number;
+        }
+
         interface EventMap extends TextInputWidget.EventMap {
             resize: [];
         }
@@ -68,6 +73,13 @@ declare namespace OO.ui {
              */
             isAutosizing(): boolean;
 
+            /**
+             * Get an object describing the current selection range in a directional manner
+             *
+             * @return Object containing 'from' and 'to' offsets
+             */
+            getRange(): NonNullRange;
+
             // #region EventEmitter overloads
             on<K extends keyof EventMap, A extends ArgTuple = [], C = null>(
                 event: K,
diff --git a/node_modules/@types/oojs-ui/OptionWidget.d.ts b/node_modules/@types/oojs-ui/OptionWidget.d.ts
index 1e44dbf..ef64a82 100644
--- a/node_modules/@types/oojs-ui/OptionWidget.d.ts
+++ b/node_modules/@types/oojs-ui/OptionWidget.d.ts
@@ -21,7 +21,10 @@ declare namespace OO.ui {
                 mixin.FlaggedElement.ConfigOptions,
                 mixin.AccessKeyedElement.ConfigOptions,
                 mixin.TitledElement.ConfigOptions
-        {}
+        {
+            /** Whether this option should be selected initially. */
+            selected?: boolean;
+        }
 
         interface Static
             extends
diff --git a/node_modules/@types/oojs-ui/PageLayout.d.ts b/node_modules/@types/oojs-ui/PageLayout.d.ts
index f028bd2..ed85114 100644
--- a/node_modules/@types/oojs-ui/PageLayout.d.ts
+++ b/node_modules/@types/oojs-ui/PageLayout.d.ts
@@ -24,7 +24,7 @@ declare namespace OO.ui {
 
         type Static = PanelLayout.Static;
 
-        type Props = PanelLayout.Props;
+        interface Props extends PanelLayout.Props {}
 
         interface Prototype extends PanelLayout.Prototype {
             /**
diff --git a/node_modules/@types/oojs-ui/PopupWidget.d.ts b/node_modules/@types/oojs-ui/PopupWidget.d.ts
index 064097e..3d93e45 100644
--- a/node_modules/@types/oojs-ui/PopupWidget.d.ts
+++ b/node_modules/@types/oojs-ui/PopupWidget.d.ts
@@ -97,7 +97,7 @@ declare namespace OO.ui {
             containerPadding?: number;
 
             /** Content to append to the popup's body */
-            $content?: JQuery;
+            $content?: JQuery<any>;
 
             /** Content to append to the popup's footer */
             $footer?: JQuery;
diff --git a/node_modules/@types/oojs-ui/ProcessDialog.d.ts b/node_modules/@types/oojs-ui/ProcessDialog.d.ts
index 6de242c..c9e1067 100644
--- a/node_modules/@types/oojs-ui/ProcessDialog.d.ts
+++ b/node_modules/@types/oojs-ui/ProcessDialog.d.ts
@@ -65,9 +65,9 @@ declare namespace OO.ui {
 
         type Static = Dialog.Static;
 
-        type Props = Dialog.Props;
+        interface Props extends Dialog.Props {}
 
-        type Prototype = Dialog.Prototype;
+        interface Prototype extends Dialog.Prototype {}
 
         interface Constructor {
             /** @param config Configuration options */
diff --git a/node_modules/@types/oojs-ui/RadioOptionWidget.d.ts b/node_modules/@types/oojs-ui/RadioOptionWidget.d.ts
index 39599da..44bfb2a 100644
--- a/node_modules/@types/oojs-ui/RadioOptionWidget.d.ts
+++ b/node_modules/@types/oojs-ui/RadioOptionWidget.d.ts
@@ -16,7 +16,7 @@ declare namespace OO.ui {
 
         type Static = OptionWidget.Static;
 
-        type Props = OptionWidget.Props;
+        interface Props extends OptionWidget.Props {}
 
         type Prototype = OptionWidget.Prototype;
 
diff --git a/node_modules/@types/oojs-ui/WindowInstance.d.ts b/node_modules/@types/oojs-ui/WindowInstance.d.ts
index b62f0d1..3193df0 100644
--- a/node_modules/@types/oojs-ui/WindowInstance.d.ts
+++ b/node_modules/@types/oojs-ui/WindowInstance.d.ts
@@ -12,14 +12,20 @@ declare namespace OO.ui {
      *
      * @see https://doc.wikimedia.org/oojs-ui/master/js/#!/api/OO.ui.WindowInstance
      */
-    interface WindowInstance extends WindowInstance.Props, WindowInstance.Prototype {}
+    interface WindowInstance<A extends string | undefined = undefined>
+        extends WindowInstance.Props<A>, WindowInstance.Prototype
+    {}
 
     namespace WindowInstance {
-        interface Props {
-            opening: JQuery.Promise<void>;
-            opened: JQuery.Promise<void>;
-            closing: JQuery.Promise<void>;
-            closed: JQuery.Promise<void>;
+        // We can't just check for `string extends T`, because strings may be constant (e.g.
+        // 'accept')
+        type PromiseReturn<T> = Extract<T, string> extends never ? unknown : { action: T };
+
+        interface Props<A = undefined> {
+            opening: JQuery.Promise<unknown>;
+            opened: JQuery.Promise<unknown>;
+            closing: JQuery.Promise<PromiseReturn<A>>;
+            closed: JQuery.Promise<PromiseReturn<A>>;
         }
 
         interface Prototype {
@@ -53,7 +59,7 @@ declare namespace OO.ui {
         }
 
         interface Constructor {
-            new(): WindowInstance;
+            new<A extends string | undefined = string | undefined>(): WindowInstance<A>;
             prototype: Prototype;
             static: {};
         }
diff --git a/node_modules/@types/oojs-ui/WindowManager.d.ts b/node_modules/@types/oojs-ui/WindowManager.d.ts
index 5549427..bcf0145 100644
--- a/node_modules/@types/oojs-ui/WindowManager.d.ts
+++ b/node_modules/@types/oojs-ui/WindowManager.d.ts
@@ -58,12 +58,17 @@ declare namespace OO.ui {
             state: "hold" | "teardown";
         }
 
-        interface WindowOpeningData {
+        interface WindowOpeningData<A extends string = string> {
             /**
              * Element to which the window will return focus when closed. Defaults the current
              * activeElement. If set to null, focus isn't changed on close.
              */
             $returnFocusTo?: JQuery | null;
+            actions?: Array<{
+                action: A;
+
+                [x: string]: any;
+            }>;
 
             [x: string]: any;
         }
@@ -243,14 +248,22 @@ declare namespace OO.ui {
              *  closing starts. This behaviour is deprecated and is not compatible with jQuery 3,
              *  see T163510.
              */
-            openWindow(
-                win: Window | string,
-                data?: WindowOpeningData,
-            ): WindowInstance & DeprecatedPromise<JQuery.Promise<void>, undefined | Error, WindowOpeningState, unknown>;
+            openWindow<D extends Window | string, A extends string = 'accept' | 'reject'>(
+                win: D,
+                data?: A[] extends WindowOpeningData['actions']
+                    ? WindowOpeningData<A>
+                    : WindowOpeningData,
+            // `undefined` accounts for when a window is closed by pressing Escape, without taking
+            // any action.
+            ):
+                & (D extends MessageDialog ? WindowInstance<A | undefined> : WindowInstance)
+                & DeprecatedPromise<JQuery.Promise<void>, undefined | Error, WindowOpeningState, unknown>;
             openWindow<T>(
                 win: Window | string,
                 data?: T extends object ? never : T,
-            ): WindowInstance & DeprecatedPromise<JQuery.Promise<void>, undefined | Error, WindowOpeningState, unknown>;
+            ):
+                & WindowInstance
+                & DeprecatedPromise<JQuery.Promise<void>, undefined | Error, WindowOpeningState, unknown>;
 
             /**
              * Close a window.
diff --git a/node_modules/@types/oojs-ui/index.d.ts b/node_modules/@types/oojs-ui/index.d.ts
index 45e24b4..6f42d75 100644
--- a/node_modules/@types/oojs-ui/index.d.ts
+++ b/node_modules/@types/oojs-ui/index.d.ts
@@ -20,6 +20,7 @@
 /// <reference path="CheckboxMultiselectInputWidget.d.ts" />
 /// <reference path="CheckboxMultiselectWidget.d.ts" />
 /// <reference path="ComboBoxInputWidget.d.ts" />
+/// <reference path="CopyTextLayout.d.ts" />
 /// <reference path="DecoratedOptionWidget.d.ts" />
 /// <reference path="Dialog.d.ts" />
 /// <reference path="DropdownInputWidget.d.ts" />
