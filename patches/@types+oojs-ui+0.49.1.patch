diff --git a/node_modules/@types/oojs-ui/CopyTextLayout.d.ts b/node_modules/@types/oojs-ui/CopyTextLayout.d.ts
new file mode 100644
index 0000000..2e31402
--- /dev/null
+++ b/node_modules/@types/oojs-ui/CopyTextLayout.d.ts
@@ -0,0 +1,147 @@
+declare namespace OO.ui {
+	/**
+	 * CopyTextLayout is an action field layout containing some readonly text
+	 * and a button to copy it to the clipboard.
+	 *
+	 * ResourceLoader module: `oojs-ui-widgets`
+	 *
+	 * @see https://doc.wikimedia.org/oojs-ui/master/js/#!/api/OO.ui.CopyTextLayout
+	 */
+	interface CopyTextLayout<
+		T extends TextInputWidget | MultilineTextInputWidget =
+			| TextInputWidget
+			| MultilineTextInputWidget
+	> extends CopyTextLayout.Props, CopyTextLayout.Prototype<T>
+	{}
+
+	namespace CopyTextLayout {
+		interface EventMap extends mixin.LabelElement.EventMap {
+			/**
+			 * When the user has executed a copy command.
+			 *
+			 * @param success Whether the copy command succeeded
+			 */
+			copy: [success: boolean];
+		}
+
+		interface ConfigOptions<M extends boolean | undefined> extends ActionFieldLayout.ConfigOptions {
+			/** Text to copy, can also be provided as `textInput.value` */
+			copyText?: string;
+			/** Config for the text input widget */
+			textInput?: M extends true
+				? MultilineTextInputWidget.ConfigOptions
+				: TextInputWidget.ConfigOptions;
+			/** Config for the button widget */
+			button?: ButtonWidget.ConfigOptions;
+			/** Whether to use a multiline text input */
+			multiline?: M;
+		}
+
+		type Static = ActionFieldLayout.Static;
+
+		interface Props extends ActionFieldLayout.Props {
+			/** Text input widget used in the layout */
+			textInput: TextInputWidget | MultilineTextInputWidget;
+			/** Button widget used in the layout */
+			button: ButtonWidget;
+		}
+
+		interface Prototype<
+			T extends TextInputWidget | MultilineTextInputWidget =
+				| TextInputWidget
+				| MultilineTextInputWidget
+		> extends FieldLayout.Prototype<T> {
+			/**
+			 * Handle button click events.
+			 *
+			 * @fires copy
+			 */
+			onButtonClick(): void;
+
+			/**
+			 * Handle text widget focus events.
+			 */
+			onInputFocus(): void;
+
+			/**
+			 * Select the text to copy.
+			 */
+			selectText(): void;
+
+			/**
+			 * Get the widget contained by the field.
+			 *
+			 * @return Field widget
+			 */
+			getField(): T;
+
+			// #region EventEmitter overloads
+			on<K extends keyof EventMap, A extends ArgTuple = [], C = null>(
+				event: K,
+				method: EventHandler<C, (this: C, ...args: [...A, ...EventMap[K]]) => void>,
+				args?: A,
+				context?: C
+			): this;
+			on<K extends string, C = null>(
+				event: K extends keyof EventMap ? never : K,
+				method: EventHandler<C>,
+				args?: any[],
+				context?: C
+			): this;
+
+			once<K extends keyof EventMap>(
+				event: K,
+				listener: (this: null, ...args: EventMap[K]) => void
+			): this;
+			once<K extends string>(
+				event: K extends keyof EventMap ? never : K,
+				listener: (this: null, ...args: any[]) => void
+			): this;
+
+			off<K extends keyof EventMap, C = null>(
+				event: K,
+				method?: EventHandler<C, (this: C, ...args: EventMap[K]) => void>,
+				context?: C
+			): this;
+			off<K extends string, C = null>(
+				event: K extends keyof EventMap ? never : K,
+				method?: EventHandler<C>,
+				context?: C
+			): this;
+
+			emit<K extends keyof EventMap>(event: K, ...args: EventMap[K]): boolean;
+			emit<K extends string>(event: K extends keyof EventMap ? never : K, ...args: any[]): boolean;
+
+			emitThrow<K extends keyof EventMap>(event: K, ...args: EventMap[K]): boolean;
+			emitThrow<K extends string>(
+				event: K extends keyof EventMap ? never : K,
+				...args: any[]
+			): boolean;
+
+			connect<T extends Partial<Record<keyof EventMap, any>>, C>( // eslint-disable-line @definitelytyped/no-unnecessary-generics
+				context: C,
+				methods: EventConnectionMap<T, C, EventMap>
+			): this;
+
+			disconnect<T extends Partial<Record<keyof EventMap, any>>, C>( // eslint-disable-line @definitelytyped/no-unnecessary-generics
+				context: C,
+				methods?: EventConnectionMap<T, C, EventMap>
+			): this;
+			// #endregion
+		}
+
+		interface Constructor {
+			/** @param config Configuration options */
+			new <M extends boolean | undefined = undefined>(config: ConfigOptions<M>): CopyTextLayout<
+				M extends true ? MultilineTextInputWidget : TextInputWidget
+			>;
+			prototype: Prototype;
+			static: Static;
+			super: ActionFieldLayout.Constructor;
+			/** @deprecated Use `super` instead */
+			parent: ActionFieldLayout.Constructor;
+		}
+	}
+
+	const CopyTextLayout: CopyTextLayout.Constructor;
+}
diff --git a/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts b/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
index b9e1230..9ad53f6 100644
--- a/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
+++ b/node_modules/@types/oojs-ui/MultilineTextInputWidget.d.ts
@@ -22,6 +22,11 @@ declare namespace OO.ui {
     interface MultilineTextInputWidget extends MultilineTextInputWidget.Props, MultilineTextInputWidget.Prototype {}
 
     namespace MultilineTextInputWidget {
+        interface NonNullRange {
+            from: number;
+            to: number;
+        }
+
         interface EventMap extends TextInputWidget.EventMap {
             resize: [];
         }
@@ -68,6 +73,13 @@ declare namespace OO.ui {
              */
             isAutosizing(): boolean;
 
+            /**
+             * Get an object describing the current selection range in a directional manner
+             *
+             * @return Object containing 'from' and 'to' offsets
+             */
+            getRange(): NonNullRange;
+
             // #region EventEmitter overloads
             on<K extends keyof EventMap, A extends ArgTuple = [], C = null>(
                 event: K,
diff --git a/node_modules/@types/oojs-ui/PopupWidget.d.ts b/node_modules/@types/oojs-ui/PopupWidget.d.ts
index 064097e..3d93e45 100644
--- a/node_modules/@types/oojs-ui/PopupWidget.d.ts
+++ b/node_modules/@types/oojs-ui/PopupWidget.d.ts
@@ -97,7 +97,7 @@ declare namespace OO.ui {
             containerPadding?: number;
 
             /** Content to append to the popup's body */
-            $content?: JQuery;
+            $content?: JQuery<any>;
 
             /** Content to append to the popup's footer */
             $footer?: JQuery;
diff --git a/node_modules/@types/oojs-ui/ProcessDialog.d.ts b/node_modules/@types/oojs-ui/ProcessDialog.d.ts
index 6de242c..c9e1067 100644
--- a/node_modules/@types/oojs-ui/ProcessDialog.d.ts
+++ b/node_modules/@types/oojs-ui/ProcessDialog.d.ts
@@ -65,9 +65,9 @@ declare namespace OO.ui {
 
         type Static = Dialog.Static;
 
-        type Props = Dialog.Props;
+        interface Props extends Dialog.Props {}
 
-        type Prototype = Dialog.Prototype;
+        interface Prototype extends Dialog.Prototype {}
 
         interface Constructor {
             /** @param config Configuration options */
diff --git a/node_modules/@types/oojs-ui/index.d.ts b/node_modules/@types/oojs-ui/index.d.ts
index 45e24b4..6f42d75 100644
--- a/node_modules/@types/oojs-ui/index.d.ts
+++ b/node_modules/@types/oojs-ui/index.d.ts
@@ -20,6 +20,7 @@
 /// <reference path="CheckboxMultiselectInputWidget.d.ts" />
 /// <reference path="CheckboxMultiselectWidget.d.ts" />
 /// <reference path="ComboBoxInputWidget.d.ts" />
+/// <reference path="CopyTextLayout.d.ts" />
 /// <reference path="DecoratedOptionWidget.d.ts" />
 /// <reference path="Dialog.d.ts" />
 /// <reference path="DropdownInputWidget.d.ts" />
